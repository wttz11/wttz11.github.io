import{_ as s,o as e,c as a,a as t}from"./app-CVXxSXU1.js";const n="/assets/webpack官网图-B7ZANId0.png",c="/assets/编译流程-DpykDiTC.png",o="/assets/chunkassets-D3ZDU8-M.png",i="/assets/合并-Ccd15bqx.png",r="/assets/输出-CfNUo7qX.png",p="/assets/构建全流程-BIFBZo1U.png",l={},h=t('<p>webpack的基础作用是将源代码进行编译后（构建打包，将各个模块的源码以函数的形式，以浏览器能够理解的JavaScript合成到一个文件中）形成最终浏览器代码，包括三个阶 段，<strong>初始化</strong>、<strong>编译</strong>、<strong>输出</strong></p><p><img src="'+n+'" alt=""></p><h1 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h1><p>此阶段，webpack会将<strong>CLI参数</strong>、<strong>配置文件</strong>、<strong>默认配置</strong>进行融合，形成一个最终的配置对象。</p><p>对配置的处理过程是依托一个第三方库<code>yargs</code>完成的</p><p>此阶段相对比较简单，主要生成配置对象为接下来的编译阶段做必要的准备</p><h1 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h1><ol><li><strong>创建chunk</strong></li></ol><p>chunk是webpack在内部构建过程中的一个概念，译为<code>块</code>，它表示通过某个入口找到的所有依赖的统称。</p><p>根据入口模块（默认为<code>./src/index.js</code>）创建一个chunk</p><p>每个chunk都有至少两个属性：</p><ul><li>name：默认为main</li><li>id：唯一编号，开发环境和name相同，生产环境是一个数字，从0开始</li></ul><ol><li><strong>构建所有依赖模块</strong></li></ol><p><img src="'+c+'" alt=""></p><ol start="2"><li><strong>产生chunk assets</strong></li></ol><p>在第二步完成后，chunk中会产生一个模块列表，列表中包含了<strong>模块id</strong>和<strong>模块转换后的代码</strong></p><p>接下来，webpack会根据配置为chunk生成一个资源列表，即<code>chunk assets</code>，资源列表可以理解为是生成到最终文件的文件名和文件内容</p><p><img src="'+o+'" alt=""></p><blockquote><p>chunk hash是根据所有chunk assets的内容生成的一个hash字符串 hash：一种算法，具体有很多分类，特点是将一个任意长度的字符串转换为一个固定长度的字符串，而且可以保证原始内容不变，产生的hash字符串就不变</p></blockquote><ol><li><strong>合并chunk assets</strong></li></ol><p>将多个chunk的assets合并到一起，并产生一个总的hash</p><p><img src="'+i+'" alt=""></p><h1 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h1><p>此步骤非常简单，webpack将利用node中的fs模块（文件处理模块），根据编译产生的总的assets，生成相应的文件。</p><p><img src="'+r+'" alt=""></p><h1 id="总过程" tabindex="-1"><a class="header-anchor" href="#总过程"><span>总过程</span></a></h1><p><img src="'+p+'" alt=""></p><p><strong>涉及术语</strong></p><ol><li>module：模块，分割的代码单元，webpack中的模块可以是任何内容的文件，不仅限于JS</li><li>chunk：webpack内部构建模块的块，一个chunk中包含多个模块，这些模块是从入口模块通过依赖分析得来的</li><li>bundle：chunk构建好模块后会生成chunk的资源清单，清单中的每一项就是一个bundle，可以认为bundle就是最终生成的文件</li><li>hash：最终的资源清单所有内容联合生成的hash值</li><li>chunkhash：chunk生成的资源清单内容联合生成的hash值</li><li>chunkname：chunk的名称，如果没有配置则使用main</li><li>id：通常指chunk的唯一编号，如果在开发环境下构建，和chunkname相同；如果是生产环境下构建，则使用一个从0开始的数字进行编号</li></ol>',29),d=[h];function m(k,g){return e(),a("div",null,d)}const _=s(l,[["render",m],["__file","index.html.vue"]]),b=JSON.parse(`{"path":"/article/1knprj1k/","title":"webpack打包流程","lang":"en-US","frontmatter":{"title":"webpack打包流程","author":"wt1","createTime":"2023/11/2 22:35:44","tags":["webpack"],"permalink":"/article/1knprj1k/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[],"isBlogPost":true,"readingTime":{"minutes":2.59,"words":777},"git":{},"filePathRelative":"前端/前端工程化/webpack/webpack打包流程.md","categoryList":[{"type":10000,"name":"前端"},{"type":10004,"name":"前端工程化"},{"type":10005,"name":"webpack"}]}`);export{_ as comp,b as data};
